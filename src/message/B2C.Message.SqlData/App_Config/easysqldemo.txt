using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Never.EasySql.Xml
{
    #region model

    public class User
    {
        public int Id { get; set; }

        public long UserId { get; set; }

        [Never.SqlClient.TypeHandler(typeof(UserNameTypeHandler))]
        public char[] UserName { get; set; }
    }

    public class UserNameTypeHandler : IReadingFromDataRecordToValueTypeHandler<char[]>, ICastingValueToParameterTypeHandler<string>
    {
        /// <summary>
        ///
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public string ToParameter(object value)
        {
            return Never.Serialization.EasyJsonSerializer.Default.SerializeObject(value);
        }

        /// <summary>
        /// 获取结果
        /// </summary>
        /// <param name="dataRecord">读取器</param>
        /// <param name="ordinal">column的位置，如果未-1表示没有找到这个值</param>
        /// <param name="columnName">行名字</param>
        /// <returns></returns>
        public char[] ToValue(IDataRecord dataRecord, int ordinal, string columnName)
        {
            var value = dataRecord.GetString(ordinal);
            return value == null ? new char[0] : value.ToCharArray();
        }
    }

    #endregion model

    #region builder

    public class SqlServerBuilder : Never.EasySql.EmbeddedDaoBuilder
    {
        public override string[] EmbeddedSqlMaps
        {
            get
            {
                return GetXmlContentFromAssembly(System.Reflection.Assembly.GetExecutingAssembly(), (xml, file) =>
                {
                    if (xml["namespace"].GetAttribute("id").IsNotEquals("demo", StringComparison.CurrentCultureIgnoreCase))
                        throw new ArgumentException(string.Format("the file {0} namespaces id attribute is error!", file));

                    return true;
                });
            }
        }

        public override string ConnectionString
        {
            get
            {
                return @"server=127.0.0.1\sqlexpress;uid=sa;pwd=123456;database=test;";
            }
        }

        protected override IEasySqlExecuter CreateSqlExecuter(string connectionString)
        {
            return new EasySql.SqlClient.SqlServerExecuter(connectionString);
        }
    }

    public class MySqlBuilder : Never.EasySql.EmbeddedDaoBuilder
    {
        public override string[] EmbeddedSqlMaps
        {
            get
            {
                return GetXmlContentFromAssembly(System.Reflection.Assembly.GetExecutingAssembly(), (xml, file) =>
                {
                    if (xml["namespace"].GetAttribute("id").IsNotEquals("demo", StringComparison.CurrentCultureIgnoreCase))
                        throw new ArgumentException(string.Format("the file {0} namespaces id attribute is error!", file));

                    return true;
                });
            }
        }

        public override string ConnectionString
        {
            get
            {
                return "server=127.0.0.1;port=3306;database=test;uid=sa;pwd=123456;";
            }
        }

        protected override IEasySqlExecuter CreateSqlExecuter(string connectionString)
        {
            return new EasySql.SqlClient.MySqlExecuter(connectionString);
        }
    }

    public class PostgreSqlBuilder : Never.EasySql.EmbeddedDaoBuilder
    {
        public override string[] EmbeddedSqlMaps
        {
            get
            {
                return GetXmlContentFromAssembly(System.Reflection.Assembly.GetExecutingAssembly(), (xml, file) =>
                {
                    if (xml["namespace"].GetAttribute("id").IsNotEquals("demo", StringComparison.CurrentCultureIgnoreCase))
                        throw new ArgumentException(string.Format("the file {0} namespaces id attribute is error!", file));

                    return true;
                });
            }
        }

        public override string ConnectionString
        {
            get
            {
                return "server=127.0.0.1;port=3306;database=test;uid=sa;pwd=123456;";
            }
        }

        protected override IEasySqlExecuter CreateSqlExecuter(string connectionString)
        {
            return new EasySql.SqlClient.PostgreSqlExecuter(connectionString);
        }
    }

    #endregion builder

    #region query

    public class Repository
    {
        #region field

        private readonly Func<IDao> builder = null;

        #endregion field

        #region ctor

        public Repository()
        {
            this.builder = ConstructibleDaoBuilder<SqlServerBuilder>.Value.Builder;
        }

        #endregion ctor

        #region crud

        public int Update()
        {
            return this.builder().ToEasyTextDao(new { Id = 1 }).Update("update myuser set UserId = 2 where Id = @Id;");
        }

        public int Delete()
        {
            return this.builder().ToEasyTextDao(new { Id = 1 }).Update("delete from myuser where Id = @Id;");
        }

        public User GetUser()
        {
            return this.builder().ToEasyTextDao(new { Id = 1 }).QueryForObject<User>("select a.* from myuser as a where Id = @Id;");
        }

        public IEnumerable<User> GetAllUser()
        {
            return this.builder().ToEasyTextDao(new
            {
                Id = 1,
                UserId = DBNull.Value,
                IdArray = new[] { 1, 2, 3, 4 }
            }).QueryForEnumerable<User>("select * from myuser where Id = $Id$ and Id in (@IdArray);");
        }

        public int Insert()
        {
            return (int)this.builder().ToEasyXmlDao(new { UserId = 1, UserName = "1" }).Insert("insUser");
        }

        public void BatchInsert()
        {
            this.builder().ToEasyXmlDao(new[] { new { UserId = 1, UserName = "1" }, new { UserId = 2, UserName = "2" } }).Insert("batchInsUser");
        }

        #endregion crud
    }

    #endregion query
}